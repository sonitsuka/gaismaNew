/* globals customElements document */
import {sanityCodeMirrorTheme} from './codemirror-theme.js'

import {EditorView, basicSetup, json} from '../vendor/vendor.bundle.js'
import {ApiBaseElement} from './api-base.js'

const runTemplate = `<span>Run</span>
  <svg data-sanity-icon="play" width="1em" height="1em" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7.5 18.5V6.5L17.5 12.5L7.5 18.5Z" fill="currentColor" stroke="currentColor" stroke-width="1.2" stroke-linejoin="round"></path></svg>`

const template = `<div class="gutter-gradient relative h-100 max-h-100 y-scroll border-top border-top-none-l">
    <div class="bg gutter-gradient sticky top-0 right-0 left-0 z-100">
      <div class="flex items-center space-between" style="padding: 8px 20px 8px 48px;">
      <h2 class="config-label mar-t-0 mar-b-0">Event</h2>
      <button ord="primary" class="sanity-button">
        ${runTemplate}
      </button>
  </div>
    <hr class='hr-border' style='margin-left: 31px; ' />
    </div>
    <div id="payload" name="payload" class='max-h-100 min-h-0'></div>
</div>
`
class PayloadPanel extends ApiBaseElement {
  invoke = () => {
    const payloadText = this.createPayloadText(this.api.store.payload.state.doc)
    const event = JSON.parse(payloadText)
    const context = {
      clientOptions: {
        apiVersion: this.apiVersion.value,
        dataset: this.api.store.selectedDataset,
        projectId: this.api.store.selectedProject,
      },
    }
    this.api.invoke({context, event})
  }
  createPayloadText = (doc) => {
    if (doc.text) {
      return doc.text.join('') || '{}'
    }
    if (doc.children) {
      return doc.children.map((child) => child.text.join('')).join('') || '{}'
    }
    return '{}'
  }
  updateButtonText = ({inprogress}) => {
    if (inprogress) {
      this.button.setAttribute('disabled', '')
      this.button.innerHTML = '<network-spinner></network-spinner>'
    } else {
      this.button.removeAttribute('disabled')
      this.button.innerHTML = runTemplate
    }
  }

  connectedCallback() {
    this.innerHTML = template
    this.payload = this.querySelector('#payload')
    this.apiVersion = document.querySelector('#apiversion')
    this.datasetname = document.querySelector('#datasetname')
    this.productId = document.querySelector('#project')
    this.button = this.querySelector('button')
    this.button.addEventListener('click', this.invoke)
    this.api.subscribe(this.updateButtonText, ['inprogress'])

    this.api.store.payload = new EditorView({
      doc: '\n\n\n\n',
      extensions: [basicSetup, json(), sanityCodeMirrorTheme],
      parent: this.payload,
    })
  }

  disconnectedCallback() {
    this.button.removeEventListener('click', this.invoke)
  }
}

customElements.define('payload-panel', PayloadPanel)
